// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Utils$AdventOfCode2018 = require("../utils/Utils.bs.js");
var HelpersFour$AdventOfCode2018 = require("./HelpersFour.bs.js");

function findFrequentSleeper(input) {
  var sleepies = { };
  Belt_Array.forEach(Belt_Array.map(HelpersFour$AdventOfCode2018.createList(input), (function (param) {
              return /* tuple */[
                      param[0],
                      HelpersFour$AdventOfCode2018.createInterval(param[1][1])
                    ];
            })), (function (param) {
          var key = param[0];
          return Belt_Array.forEach(param[1], (function (t) {
                        var tVal = String(t);
                        var match = sleepies[key];
                        if (match !== undefined) {
                          return HelpersFour$AdventOfCode2018.updateDictByOne(match, tVal);
                        } else {
                          var first = { };
                          first[tVal] = 1;
                          sleepies[key] = first;
                          return /* () */0;
                        }
                      }));
        }));
  var output = Belt_Array.get(Utils$AdventOfCode2018.sortInPlaceWith(Belt_Array.map(Js_dict.entries(sleepies), (function (param) {
                  var id = param[0];
                  var match = HelpersFour$AdventOfCode2018.getMostSleepy(param[1]);
                  if (match !== undefined) {
                    var match$1 = match;
                    return /* tuple */[
                            id,
                            match$1[0],
                            match$1[1]
                          ];
                  } else {
                    return /* tuple */[
                            id,
                            "",
                            0
                          ];
                  }
                })), (function (param, param$1) {
              return param$1[2] - param[2] | 0;
            })), 0);
  if (output !== undefined) {
    var match = output;
    return Caml_int32.imul(Caml_format.caml_int_of_string(match[0]), Caml_format.caml_int_of_string(match[1]));
  } else {
    return 0;
  }
}

exports.findFrequentSleeper = findFrequentSleeper;
/* Js_dict Not a pure module */
