// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var CalibrateOne$AdventOfCode2018 = require("./CalibrateOne.bs.js");

function findDuplicateFrequency(input, _$staropt$star, _$staropt$star$1, _$staropt$star$2, _param) {
  while(true) {
    var $staropt$star = _$staropt$star$2;
    var $staropt$star$1 = _$staropt$star$1;
    var $staropt$star$2 = _$staropt$star;
    var lastResult = $staropt$star$2 !== undefined ? $staropt$star$2 : 0;
    var lastDuplicate = $staropt$star$1 !== undefined ? Js_primitive.valFromOption($staropt$star$1) : undefined;
    var lastSeenFrequencies = $staropt$star !== undefined ? $staropt$star : /* array */[0];
    if (lastDuplicate !== undefined) {
      return lastDuplicate;
    } else {
      var match = CalibrateOne$AdventOfCode2018.deviceFrequency(input, lastResult, Js_primitive.some(lastDuplicate), lastSeenFrequencies, /* () */0);
      var seenFrequencies = match[/* seenFrequencies */1];
      var finalValue = Belt_Option.getWithDefault(Belt_Array.get(seenFrequencies, seenFrequencies.length - 1 | 0), 0);
      _param = /* () */0;
      _$staropt$star$2 = seenFrequencies;
      _$staropt$star$1 = Js_primitive.some(match[/* duplicate */0]);
      _$staropt$star = finalValue;
      continue ;
    }
  };
}

exports.findDuplicateFrequency = findDuplicateFrequency;
/* No side effect */
