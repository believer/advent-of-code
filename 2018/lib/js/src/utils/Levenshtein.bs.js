// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function length(s) {
  return s.length;
}

function minimum(a, b, c) {
  return Caml_obj.caml_min(a, Caml_obj.caml_min(b, c));
}

function levenshtein(s, t) {
  var first = s.length;
  var second = t.length;
  var matrix = $$Array.make_matrix(first + 1 | 0, second + 1 | 0, 0);
  for(var i = 0; i <= first; ++i){
    Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, i), 0, i);
  }
  for(var j = 0; j <= second; ++j){
    Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, 0), j, j);
  }
  for(var j$1 = 1; j$1 <= second; ++j$1){
    for(var i$1 = 1; i$1 <= first; ++i$1){
      if (Caml_string.get(s, i$1 - 1 | 0) === Caml_string.get(t, j$1 - 1 | 0)) {
        Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, i$1), j$1, Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, i$1 - 1 | 0), j$1 - 1 | 0));
      } else {
        Caml_array.caml_array_set(Caml_array.caml_array_get(matrix, i$1), j$1, minimum(Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, i$1 - 1 | 0), j$1) + 1 | 0, Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, i$1), j$1 - 1 | 0) + 1 | 0, Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, i$1 - 1 | 0), j$1 - 1 | 0) + 1 | 0));
      }
    }
  }
  return Caml_array.caml_array_get(Caml_array.caml_array_get(matrix, first), second);
}

function similarity(s1, s2) {
  var match = s1.length < s2.length ? /* tuple */[
      s2,
      s1
    ] : /* tuple */[
      s1,
      s2
    ];
  var longer = match[0];
  var longerLength = longer.length;
  if (longerLength !== 0) {
    return (longerLength - levenshtein(longer, match[1])) / longerLength;
  } else {
    return 1.0;
  }
}

exports.length = length;
exports.minimum = minimum;
exports.levenshtein = levenshtein;
exports.similarity = similarity;
/* No side effect */
